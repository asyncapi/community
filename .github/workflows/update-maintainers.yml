name: Update MAINTAINERS.yaml

on:
  pull_request:
    types: [closed]
    paths:
      - 'CODEOWNERS'

jobs:
  update-maintainers:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: master
          path: community-main

      - name: Checkout one commit before last one
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: master
          path: community

      - run: cd community && git checkout HEAD^

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install js-yaml
        run: npm install js-yaml@3.14.1

      - name: Get repository name
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "Repository Name: $REPO_NAME"

      - name: Compare CODEOWNERS
        id: compare-codeowners
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Get repository name
            const repoName = process.env.REPO_NAME;

            function extractGitHubUsernames(content) {
              const regex = /@([a-zA-Z0-9_-]+)/g;
              const matches = content.match(regex);
              if (!matches) {
                return [];
              }
              return matches.map(match => match.substr(1));
            }
      
            const mainCodeowners = fs.readFileSync('./community-main/CODEOWNERS', 'utf8');
            const prCodeowners = fs.readFileSync('./community/CODEOWNERS', 'utf8');
      
            const mainUsernames = extractGitHubUsernames(mainCodeowners);
            const prUsernames = extractGitHubUsernames(prCodeowners);

            const addedUsernames = mainUsernames.filter(username => !prUsernames.includes(username));
            const removedUsernames = prUsernames.filter(username => !mainUsernames.includes(username));
            console.log('Added Usernames:', addedUsernames);
            console.log('Removed Usernames:', removedUsernames);
            console.log(`ADDED_USERNAMES=${addedUsernames.join(', ')}`);
            console.log(`REMOVED_USERNAMES=${removedUsernames.join(', ')}`);

            // Update MAINTAINERS.yaml
            const maintainersFile = './community-main/MAINTAINERS.yaml';
            const maintainers = yaml.safeLoad(fs.readFileSync(maintainersFile, 'utf8'));

            // Update for added usernames
            addedUsernames.forEach(username => {
              // Exclude bot accounts
              if (username === 'asyncapi-bot' || username === 'asyncapi-bot-eve') {
                console.log('Skipping bot account:', username);
                return; // Skip the iteration for bot accounts
              }
              const existingMaintainer = maintainers.find(maintainer => maintainer.github === username);
              if (!existingMaintainer) {
                maintainers.push({
                  github: username,
                  isTscMember: false,
                  repos: [repoName]
                });
                console.log('Added maintainer:', username);
              } else {
                console.log('Maintainer', username, 'already exists. Skipping addition.');
              }
            });

            // Update for removed usernames
            removedUsernames.forEach(username => {
              const index = maintainers.findIndex(maintainer => maintainer.github === username);
              if (index !== -1) {
                const maintainer = maintainers[index];
                const repoIndex = maintainer.repos.indexOf(repoName);
            
                if (repoIndex !== -1) {
                  maintainer.repos.splice(repoIndex, 1);
                  console.log(`Removed repository ${repoName} from maintainer ${username}`);
            
                  if (maintainer.repos.length === 0) {
                    maintainers.splice(index, 1);
                    console.log(`Removed maintainer ${username} as they have no other repositories`);
                  }
                } else {
                  console.log(`Repository ${repoName} not found for maintainer ${username}`);
                }
              } else {
                console.log(`Maintainer ${username} does not exist. Skipping removal.`);
              }
            });

            // Write updated MAINTAINERS.yaml file
            const updatedMaintainers = yaml.safeDump(maintainers);
            fs.writeFileSync(maintainersFile, updatedMaintainers);
            console.log('Updated MAINTAINERS.yaml:', updatedMaintainers);
